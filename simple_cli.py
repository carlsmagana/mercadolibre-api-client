#!/usr/bin/env python3
"""
CLI simplificado para el cliente p√∫blico de MercadoLibre
"""

import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from datetime import datetime
from public_client import create_public_client

console = Console()

@click.group()
def cli():
    """üõí Cliente P√∫blico de MercadoLibre
    
    Herramienta simplificada para explorar productos de MercadoLibre.
    
    Nota: Debido a cambios en las pol√≠ticas de MercadoLibre, 
    este cliente usa m√©todos alternativos y puede mostrar datos de ejemplo.
    """
    pass

@cli.command()
@click.argument('query')
@click.option('--limit', '-l', default=10, help='N√∫mero de resultados')
@click.option('--export', '-e', help='Exportar a archivo JSON')
def search(query, limit, export):
    """Busca productos en MercadoLibre"""
    
    console.print(f"\nüîç [bold blue]Buscando: '{query}'[/bold blue]")
    console.print(f"üìä L√≠mite: {limit}")
    
    try:
        with create_public_client() as client:
            products = client.search_products_public(query, limit)
            
            if products:
                console.print(f"\n‚úÖ [bold green]Encontrados {len(products)} productos[/bold green]")
                
                # Crear tabla
                table = Table(title=f"Resultados para '{query}'")
                table.add_column("ID", style="cyan", no_wrap=True)
                table.add_column("T√≠tulo", style="white", max_width=35)
                table.add_column("Precio", style="green", justify="right")
                table.add_column("Vendidos", style="magenta", justify="right")
                table.add_column("Env√≠o", style="blue")
                
                for product in products:
                    shipping = "‚úÖ Gratis" if product.free_shipping else "üí∞ Pago"
                    condition_short = "new" if product.condition == "new" else "used" if product.condition == "used" else "n/a"
                    
                    table.add_row(
                        product.id,
                        product.title[:32] + "..." if len(product.title) > 35 else product.title,
                        f"${product.price:,.2f}",
                        f"{product.sold_quantity:,}",
                        shipping
                    )
                
                console.print(table)
                
                # Generar archivos de salida autom√°ticamente
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                query_clean = "".join(c for c in query if c.isalnum() or c in (' ', '-', '_')).strip().replace(' ', '_')
                
                # Exportar JSON
                json_filename = f"{query_clean}_{timestamp}.json"
                client.export_to_json(products, json_filename)
                
                # Exportar CSV
                csv_filename = f"{query_clean}_{timestamp}.csv"
                try:
                    import pandas as pd
                    import os
                    
                    os.makedirs('exports', exist_ok=True)
                    csv_filepath = f"exports/{csv_filename}"
                    
                    # Convertir productos a DataFrame
                    data = []
                    for product in products:
                        data.append({
                            'id': product.id,
                            'titulo': product.title,
                            'precio': product.price,
                            'moneda': product.currency,
                            'url': product.permalink,
                            'imagen': product.thumbnail,
                            'condicion': product.condition,
                            'vendedor_id': product.seller_id,
                            'categoria_id': product.category_id,
                            'envio_gratis': product.free_shipping,
                            'cantidad_vendida': product.sold_quantity
                        })
                    
                    df = pd.DataFrame(data)
                    df.to_csv(csv_filepath, index=False, encoding='utf-8')
                    
                    console.print(f"\nüíæ [bold green]Archivos generados:[/bold green]")
                    console.print(f"   üìÑ JSON: exports/{json_filename}")
                    console.print(f"   üìä CSV:  exports/{csv_filename}")
                    
                except ImportError:
                    console.print(f"\nüíæ [bold green]Archivo generado:[/bold green]")
                    console.print(f"   üìÑ JSON: exports/{json_filename}")
                    console.print(f"   ‚ö†Ô∏è  CSV no disponible (requiere pandas)")
                
                # Exportar adicional si se especifica nombre personalizado
                if export:
                    custom_filename = f"{export}_{timestamp}.json"
                    client.export_to_json(products, custom_filename)
                    console.print(f"   üìÑ Personalizado: exports/{custom_filename}")
                
            else:
                console.print("\n‚ùå [bold red]No se encontraron productos[/bold red]")
                
    except Exception as e:
        console.print(f"\n‚ùå [bold red]Error: {str(e)}[/bold red]")

@cli.command()
def categories():
    """Lista categor√≠as disponibles"""
    
    console.print("\nüìÇ [bold blue]Categor√≠as Principales[/bold blue]")
    
    try:
        with create_public_client() as client:
            categories = client.get_categories_public()
            
            if categories:
                table = Table(title="Categor√≠as")
                table.add_column("ID", style="cyan")
                table.add_column("Nombre", style="white")
                
                for category in categories:
                    table.add_row(
                        category.get('id', 'N/A'),
                        category.get('name', 'N/A')
                    )
                
                console.print(table)
            else:
                console.print("‚ùå No se pudieron obtener categor√≠as")
                
    except Exception as e:
        console.print(f"‚ùå Error: {str(e)}")

@cli.command()
def demo():
    """Ejecuta una demostraci√≥n completa"""
    
    console.print("\nüé¨ [bold blue]Demostraci√≥n del Cliente P√∫blico[/bold blue]")
    console.print("=" * 50)
    
    queries = ["iPhone", "MacBook", "Samsung Galaxy", "iPad"]
    
    for query in queries:
        console.print(f"\nüîç Buscando: [bold]{query}[/bold]")
        
        try:
            with create_public_client() as client:
                products = client.search_products_public(query, 3)
                
                if products:
                    console.print(f"‚úÖ {len(products)} productos encontrados")
                    
                    for i, product in enumerate(products, 1):
                        console.print(f"  {i}. {product.title[:50]}...")
                        console.print(f"     üí∞ ${product.price:,.2f}")
                else:
                    console.print("‚ùå Sin resultados")
                    
        except Exception as e:
            console.print(f"‚ùå Error: {str(e)}")
    
    console.print(f"\nüéâ [bold green]Demostraci√≥n completada[/bold green]")

@cli.command()
def info():
    """Muestra informaci√≥n sobre el cliente"""
    
    info_text = """
üõí Cliente P√∫blico de MercadoLibre

üìã Caracter√≠sticas:
‚Ä¢ B√∫squeda de productos sin autenticaci√≥n
‚Ä¢ Exploraci√≥n de categor√≠as
‚Ä¢ Exportaci√≥n a JSON
‚Ä¢ Interfaz colorida con Rich

‚ö†Ô∏è  Limitaciones:
‚Ä¢ MercadoLibre requiere autenticaci√≥n para APIs completas
‚Ä¢ Algunos datos pueden ser ejemplos
‚Ä¢ Funcionalidad limitada comparada con APIs oficiales

üí° Para acceso completo:
‚Ä¢ Registra tu aplicaci√≥n en: https://developers.mercadolibre.com.mx/
‚Ä¢ Usa el cliente completo con credenciales

üöÄ Comandos disponibles:
‚Ä¢ search "t√©rmino" - Buscar productos
‚Ä¢ categories - Listar categor√≠as  
‚Ä¢ demo - Ejecutar demostraci√≥n
‚Ä¢ info - Esta informaci√≥n
    """
    
    console.print(Panel(info_text, title="‚ÑπÔ∏è  Informaci√≥n del Cliente"))

if __name__ == '__main__':
    cli()
